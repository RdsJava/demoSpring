https://betacode.net/10127/spring-tutorial-for-beginners




Нет разницы в способе использования @Service, @Component и @Repository, вы можете использовать для аннотации на вашем классе, который соответствует значению и контексту приложения.

Как видите, @Service и @Repository являются специализированными вариантами аннотации @Component.
Они предоставляют дополнительную информацию о назначении класса, что помогает в понимании кода.
Однако, с точки зрения функциональности, @Component, @Service и @Repository взаимозаменяемы и не влияют на поведение класса.
выбор между @Component, @Service и @Repository должен определяться не функциональными требованиями, а семантикой и структурой вашего приложения.



Созданные Spring BEAN будут управляемы в Spring IoC Container (Контейнер Spring IoC).


Вернемся к вопросу "Что такое IoC?".
По традиционному способу объект создан из класса, его поля (field) будут иметь значения прикрепленные изнутри этого класса. Spring сделал обратное традиционному способу, объекты созданы и некоторые его поля имеют значения, которые вкололи снаружи, так называемым IoC.

IoC это аббревиатура "Inversion of Control" - Значит "Инверсия управления".

IoC Container это контейнер содержащий все Spring BEAN используемые приложением.




@Configuration
public class AppConfig {

    @Bean
    public BeanOne beanOne() {
        return new BeanOne(beanTwo());
    }

    @Bean
    public BeanTwo beanTwo() {
        return new BeanTwo();
    }
}
В примере beanOne получает ссылку на beanTwo через внедрение конструктора.
Этот метод объявления зависимостей между компонентами работает только тогда, когда метод @Bean объявлен в классе @Configuration.
Вы не можете объявлять зависимости между компонентами, используя простые классы @Component.